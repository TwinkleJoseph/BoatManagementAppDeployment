---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: Deployment template for a postgresql server with persistent storage.
    tags: "${NAME}-${TAG_NAME}"
  name: "${NAME}-deploy"
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: postgres-init-sql
  data:
    init.sql: |
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; 
      CREATE TABLE IF NOT EXISTS public.fishing_boats
      (
          id uuid NOT NULL DEFAULT uuid_generate_v4(),
          registration_number character varying(40) COLLATE pg_catalog."default",
          vessel_name character varying(40) COLLATE pg_catalog."default",
          port_registration character varying(40) COLLATE pg_catalog."default",
          guide_id uuid,
          status character varying(40) COLLATE pg_catalog."default",
          created_datetime timestamp without time zone NOT NULL DEFAULT now(),
          updated_datetime timestamp without time zone NOT NULL DEFAULT now(),
          CONSTRAINT fishing_boats_pkey PRIMARY KEY (id)
      );
      ALTER TABLE public.fishing_boats OWNER to postgres; 
- apiVersion: v1
  kind: DeploymentConfig
  metadata:    
    name: "${NAME}-${TAG_NAME}"
    generation: 1
    labels:
      app: "${NAME}-${TAG_NAME}"
      template: "${NAME}-deploy"
  spec:
    strategy:      
      type: Recreate
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
    triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - "${NAME}-${TAG_NAME}"
          from:
            kind: ImageStreamTag
            name: 'postgresql:10'
            namespace: openshift
      - type: ConfigChange  
    replicas: 1
    test: false
    selector:
      name: "${NAME}-${TAG_NAME}"
    template:
      metadata:
        labels:
          name: "${NAME}-${TAG_NAME}"
      spec:
        volumes:
        - name: "${NAME}-data"
          persistentVolumeClaim:
            claimName: "${NAME}-${TAG_NAME}"
        - name: init-sql
          configMap:
            name: postgres-init-sql 
            items:
              - key: init.sql
                path: init.sql   
        containers:
        - name: "${NAME}-${TAG_NAME}"
          image:  " "         
          ports:
            - containerPort: 5432
              protocol: TCP          
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: "${NAME}-${TAG_NAME}-secret"
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: "${NAME}-${TAG_NAME}-secret"
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: DATABASE_NAME
                name: "${NAME}-${TAG_NAME}-secret" 
          - name: POSTGRESQL_INITDB_ARGS
            value: "--data-checksums --encoding=UTF-8 --locale=en_US.UTF-8 --lc-collate=C --lc-ctype=C"               
          resources:
            limits:
              memory: 512Mi          
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: "${NAME}-data" 
            - name: init-sql
              mountPath: /docker-entrypoint-initdb.d/
          livenessProbe:
            exec:
              command:
                - /usr/libexec/check-container
                - '--live'          
          readinessProbe:
            exec:
              command:
                - /usr/libexec/check-container            
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File                   
          imagePullPolicy: IfNotPresent          
          failureThreshold: 3
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
          securityContext:
            capabilities: {}
            privileged: false
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30        
        schedulerName: default-scheduler
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${NAME}-${TAG_NAME}"
    labels:
      app: "${NAME}-${TAG_NAME}"
      template: "${NAME}-deploy"
  spec:
    #storageClassName: "${PERSISTENT_VOLUME_CLASS}"
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${PERSISTENT_VOLUME_SIZE}"
- kind: Secret
  apiVersion: v1
  metadata:
    name: "${NAME}-${TAG_NAME}-secret"
    labels:
      app: "${NAME}-${TAG_NAME}"
      template: "${NAME}-deploy"
  stringData:
    DATABASE_USER: "${POSTGRESQL_USER}"
    DATABASE_PASSWORD: "${POSTGRESQL_PASSWORD}"
    DATABASE_ADMIN_PASSWORD: "${POSTGRESQL_ADMIN_PASSWORD}"
    DATABASE_NAME: "${POSTGRESQL_DATABASE_NAME}"
  type: Opaque 
- kind: Service
  apiVersion: v1
  metadata:
    name: "${NAME}-${TAG_NAME}"
    labels:
      app: "${NAME}-${TAG_NAME}"
      template: "${NAME}-deploy"
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  spec:
    ports:
    - name: "${NAME}-${TAG_NAME}"
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      name: "${NAME}-${TAG_NAME}"
    type: ClusterIP
    sessionAffinity: None         
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the OpenShift resources associated to the
    PostgreSQL instance.
  required: true
  value: postgresql-db
- name: TAG_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod
  required: true
- name: PERSISTENT_VOLUME_SIZE
  displayName: Persistent Volume Size
  description: The size of the persistent volume , e.g. 512Mi, 1Gi, 2Gi.
  required: true
  value: 1Gi
- name: PERSISTENT_VOLUME_CLASS
  displayName: Persistent Volume Class name
  description: The class of the volume; gluster-file, gluster-block, gluster-file-db.
  required: false
  value: netapp-file-standard
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL Connection Password
  description: Password for the PostgreSQL connection user.  Needs to be basee64 encoded/
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- name: POSTGRESQL_ADMIN_PASSWORD
  displayName: PostgreSQL Connection Admin Password
  description: Password for the PostgreSQL connection user.  Needs to be basee64 encoded/
  required: true
  generate: expression
  from: "[a-zA-Z0-9]{16}"   
- name: POSTGRESQL_DATABASE_NAME
  displayName: Database Name
  description: A valid database name used by the service.
  required: true
  value: postgres 
- name: POSTGRESQL_USER
  displayName: Database User
  description: A valid database user used by the service.
  required: true
  value: postgres
- name: IMAGE_REGISTRY_HOST
  description: The image tag name to pull for the deployment.
  required: true 
- name: IMAGE_NAMESPACE
  description: The location for your image streams (Tools Workspace).
  required: true
- name: IMAGE_TAG
  description: The image tag to pull for the deployment.
  required: true        
